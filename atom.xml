<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蓝药丸</title>
  
  
  <link href="http://blog.bluepill.life/atom.xml" rel="self"/>
  
  <link href="http://blog.bluepill.life/"/>
  <updated>2021-05-29T12:22:21.356Z</updated>
  <id>http://blog.bluepill.life/</id>
  
  <author>
    <name>Tqtifnypmb</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>技术可以是一种万人敌之术</title>
    <link href="http://blog.bluepill.life/2021/05/29/tech/"/>
    <id>http://blog.bluepill.life/2021/05/29/tech/</id>
    <published>2021-05-29T12:18:14.000Z</published>
    <updated>2021-05-29T12:22:21.356Z</updated>
    
    <content type="html"><![CDATA[<p>曾经有一个作家说过：对于作家这个职业，服务一个读者跟服务一千个读者，作家需要付出的努力是一样的。</p><p>当然，这个作家在讲这话的时候，可能指的是写作的技术。但实际上，作家在获得收入上一个读者跟一千个读者，作者付出的成本也是差不多的——作者的主要成本在于把书写出来，在以前还有印刷跟分发成本，但在现在如果你写的网络小说或者发表在网络上面，连印刷跟分发成本都没有了，那你每增加一个读者的边际成本基本就是 0。也就是说，你是有可能写一本书，然后同时服务成千上万的读者，单凭一个人触达上千、上万人的。</p><p>这在过去的互联网出现以前是不可做到的。如果你开一家餐厅，你最多只能服务餐厅附近的客人，而且你能服务的客人是受到你餐厅位置数量限制的。你的餐厅有两百个座位，你一次就只能服务两百为客人，这就是上限。另外其实就算你有无数的座位，也不可能服务无数的客人，因为每天服务一百位客人，跟每天服务一千位客人，是难度完全不同的两件事情。</p><h3 id="软件作为一种服务"><a href="#软件作为一种服务" class="headerlink" title="软件作为一种服务"></a>软件作为一种服务</h3><p>在互联网行业，软件跟网络小说一样，用户的边际成本同样是接近于 0 的。通过一个软件，软件开发者同样可以直接接触到成千万的用户，有可能同时解决上千、上万人的问题。只是软件开发者通常不会从这个角度去看自己在做的事情。他们通常只会把自己做的事情，看作是在解决技术难题，而不会把它看作是在开发一项服务。</p><p>一个产品作为一项服务，本质上是在倡导一种改变。即你认为现实生活中某些事情有问题，于是开发一项服务去解决这个问题。你做什么产品、怎么做，就相当于是你在表达说：你在关注些什么，你认为事情正确的做法应该是怎么样的。在开发一项服务过程中，一切都是围绕人而发生的。我们为人解决问题，创造价值，同时获得收益。</p><p>但如果把软件开发看作是在解决技术难题，那就完全是另一个游戏了。在这个游戏里面，最根本的技术高低的比较。你的所有努力最终目的就在于从这场技术的较量中爬得更高，赢得其他竞争对手的认可。可是这种比较是没有意义的，因为你获得了认可之后，除了短暂地满足一下 ego 以外，依然什么都没有发生。<strong>所有的知识，只是停留在大脑内的概念，本身是没有意义的。只有当你通过行动，把它们表现出来的时候，知识才有意义。</strong></p><h3 id="试错成本"><a href="#试错成本" class="headerlink" title="试错成本"></a>试错成本</h3><p>没有人可以预测未来，一家餐厅在开张运营之前，没有人能预判它能不能成功。软件这种服务跟餐厅的最大区别是试错成本低。开餐厅这个游戏，可能需要一两年的时间还有比较多的钱才能试一次，但对于有独立开发能力的人来说，尝试做一个软件产品的成本是可以很低的。尤其是在现在技术这么成熟的时候。</p><p>所以你可以用相对较低的成本你验证你的想法，如果失败了，你的损失是有限的，而一旦成功了，我的收获可以是巨大的。理论上，这是很划算的尝试，因为你赚到钱的数学期望是很高的。尤其是，如果你还能在日常开发工作中获得乐趣的话，那这就是一个非常好玩而且有益的游戏，何乐而不为？</p><p>最大的障碍可能就是，你从来没有从这个角度去看过自己在做的事情，你不知道这个游戏原来还能这样玩。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;曾经有一个作家说过：对于作家这个职业，服务一个读者跟服务一千个读者，作家需要付出的努力是一样的。&lt;/p&gt;
&lt;p&gt;当然，这个作家在讲这话的时候，可能指的是写作的技术。但实际上，作家在获得收入上一个读者跟一千个读者，作者付出的成本也是差不多的——作者的主要成本在于把书写出来，在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>追求技术可能只是一种逃避</title>
    <link href="http://blog.bluepill.life/2021/04/29/ego-tech/"/>
    <id>http://blog.bluepill.life/2021/04/29/ego-tech/</id>
    <published>2021-04-28T16:01:02.000Z</published>
    <updated>2021-04-28T16:02:50.672Z</updated>
    
    <content type="html"><![CDATA[<p>想像一下，一个软件工程师要去做一个产品，他会怎么做？</p><p>首先他可能会从技术角度去找一个产品想法：最近有什么新的技术趋势 AI、VR 或者是 AR，怎么用这些技术做成一个产品。当然，一个新技术出现，会解锁一些过去因为技术限制无法解决的问题，使得一些新产品变得可能。但工程师大概率不是这样想的，他想的是「我要用上这种很炫的技术」。就像一个拿着锤子找钉子的人，他在找一个能用得上新技术的地方，而不是在找一个需要解决的问题。</p><p>其次，他衡量一个项目是不是值得做、应不应该做，也是从技术上看，这个项目是不是有足够多的技术挑战，是不是需要用到很炫的技术。但是，一个产品是不是好产品，会不会有人用，肯定是跟这个产品是不是解决了一个实际存在的问题有关，跟这个产品用了什么技术无关。用户也不可能因为你用了最新、最炫的技术就会更喜欢你的产品。这绝对不是什么高深的道理，每一个人只要稍微想一想就会明白。只是软件工程师很可能不理解，因为他们根本不会尝试去理解它。</p><h4 id="技术作为自我价值"><a href="#技术作为自我价值" class="headerlink" title="技术作为自我价值"></a>技术作为自我价值</h4><p>在程序员的世界里技术几乎是一种等同于自我价值的东西。</p><p>一方面，在人力市场上公司招聘、考核（至少在最初阶段）是以技术能力去衡量一个人的价值的。程序员在要这个规则下胜出，只能努力朝着规则要求的方向去优化自己，甚至用这个标准去相互比较、竞争。长此以往，这一套以技术衡量自我价值的标准，就极大影响了程序员看待自己和世界的方式：「评判我的技术，就是评判我」，「我技术是不是厉害，说明我是不是一个厉害的人」……</p><p>另一方面，相对于人生的其他事情，技术是相对具体、确定性强的。在技术上，你容易得到一种确定的反馈——投入一点精力，能得到相应回报。0 就是 0，1 就是 1，一切是明确，如果一个程序出现了问题，肯定是某个地方出错了，只要修正这个错，问题就会消失。但现实世界是一个巨型的复杂系统，大部分事情是模糊的：你做一件事情之前，没办法确定能不能得到回报；如果一件事情出了问题，你不会确定地知道做什么能把它修补好，甚至可能无论做什么都不会好。所以，对于尝试过技术带来的确定性的工程师，他们可能会被吸附在技术世界里面不愿意出去了。</p><p>你能想像，一个人在现实的不确定性中屡遭打击的人，自然想要躲到一个有明确确定性的世界里面。把研究技术作为一种逃避的手段。</p><h4 id="技术是一种生产工具"><a href="#技术是一种生产工具" class="headerlink" title="技术是一种生产工具"></a>技术是一种生产工具</h4><p>但是，所有的技术最终都是用于创造、生产一个产品的。一个工匠，通过做一个个复杂的作品，在这个过程中把手艺锻炼得非常厉害；跟一个学者，先通过研究把手艺锻炼好，再去做出来厉害的作品，是两条完全不同的路。而后者很可能是一条走不通的路。因为理论是在经验中提炼出来的，要把理论转化回技术，似乎也只能在经验中进行。</p><p>你很难像，一个工匠会把手艺训练得非常好，却对什么样的作品是一个好作品，什么样的产品值得做完全没有审美。只是坐在那里，等着别人来给他产品图纸，然后他再把它造出来。当你掌握了一个工具以后，你自然会想用这个工具去创造、去表达，毕竟你努力学习这个工具为的就是运用它，而不是为了把自己也变成掌握了这个工具的工具。</p><p>软件技术是一种万人敌的工具，它生产出来的产品给一个人用跟十万人用的成本几乎相同。也就是说，如果你掌握了这个工具，你是有可能一个人为十万人提供服务的。如果你已经掌握了这个工具，不去尝试一下，是非常可惜的。毕竟这需要的只是，你走出技术的世界，放弃虚假的确定性，回到现实世界，在不确定性中找到自己的路，运用这个工具把作品做出来。</p><p>这是一个不会输的旅程。因为无论到最后产品做没做出来，你都踏出了回归现实世界的第一步，不再躲在「技术」后面，自欺欺人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;想像一下，一个软件工程师要去做一个产品，他会怎么做？&lt;/p&gt;
&lt;p&gt;首先他可能会从技术角度去找一个产品想法：最近有什么新的技术趋势 AI、VR 或者是 AR，怎么用这些技术做成一个产品。当然，一个新技术出现，会解锁一些过去因为技术限制无法解决的问题，使得一些新产品变得可能。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>每一个产品都是一种可能性</title>
    <link href="http://blog.bluepill.life/2021/04/14/product-pro/"/>
    <id>http://blog.bluepill.life/2021/04/14/product-pro/</id>
    <published>2021-04-14T14:17:35.000Z</published>
    <updated>2021-04-15T01:25:46.993Z</updated>
    
    <content type="html"><![CDATA[<p>你可以想像一下，如果整个互联网都能通过搜索擎搜索得到，那么整个互联网就像是一个大商场，搜索的流量流经这个商场里面的每一家店。当一家店有人经过，并且它为这些人提供他们需要的产品和服务的时候，它就有可能把游客变成用户，并从中获得收益。</p><h4 id="拥有属于你的产品"><a href="#拥有属于你的产品" class="headerlink" title="拥有属于你的产品"></a>拥有属于你的产品</h4><p>所以，在互联网这个大商场中的人可以分成两类：一种是使用产品、服务的人，另一种是提供产品或者服务的人。</p><p>当我们是第一种人的时候，我们在这个商场上来来去去只是一个游客，不管我们在互联网上泡了多久，都没有留下来任何东西。我们去公司上班也一样，不管你工作了一年还是十年，也不管你在公司里面做了多少的事情，在你离开一家公司、或者退休的时候，回头再看，你会突然发现，原来这些年自己做的所有事情都不属于自己。</p><p>当然，你会积累经验，也会积累社会关系等等。但你始终没有一个实实在在放在那儿、完全属于你的产品。这就好像一个以打猎为生的人，每个月打回来猎物就吃，吃完再去打。打猎打了三年，除了积累了很多的经验以外，三年后的你跟三年前的你一样，还是在打猎，本质上没有改变。</p><p>如果是另一种在商场内提供产品或者服务的人。这就相当于你在商场内有了一家属于你的店。如果这家店确实能提供价值，它才能生产一些别人需要的产品，或者提供一些别人需要的服务，那么这家店就有可能会带来一些收入。</p><p>这跟打猎式生活更大的一个区别在于，你提供产品/服务是会跟随时间一起发展的。可能你的产品今年有 10 个用户，明年可能会有 100 个用户，它的发展是一个跟时间有关的函数（当然也可能会越来越坏）。所以你收获的成果是会随着你持续做的时间，慢慢累积下来的。到最后可能就会量变引起质变，会你的生活发生本质的变化。</p><p>这样，做一个产品就像是种下一颗种子，只要气候合适，它是有可能长成大树的。</p><h4 id="每一个产品都是一种可能性"><a href="#每一个产品都是一种可能性" class="headerlink" title="每一个产品都是一种可能性"></a>每一个产品都是一种可能性</h4><p>当然，每一个产品做出来，有可能成功，也可能失败，而且往往失败的可能性会大得多。但对于独立开发者来说，这是一个相对安全的概率游戏，而不是一个需要孤注一掷的赌博。因为对独立开发者来说，做一个产品的成本并不高。</p><p>试想想，如果你是一个厨师，你想开一家自己的餐厅，这个尝试的成本是很大的。可能你全部的家当只能支持你尝试一两次，如果都失败了，那你的损失是巨大的。但对于独立开发者来说，他可以尝试十几次，而且就算这些尝试全部失败了，损失也不会大到对他的生活造成很大的影响。</p><p>而且正如对于一个作家而言<strong>写一个读者喜欢的作品需要付出的努力，跟写给一千个读者是一样的。</strong>对互联网产品和服务来说，道理也是差不多的。因为在互联网上，你的产品跟服务对于每增加一个用户的边际成本几乎是 0。只要你的产品/服务确实有价值，能解决某一些人的问题。那不管这些人的数量是一千还是一万甚至是十万，对你来说，成本不会相差很多，需要付出的努力也不会相差很大。</p><p>所以，当你做一个产品成本不是特别高的时候，每一个产品就都是一种可能性。就好像你手拿猎枪，向黑暗森林里面打了一枪，如果没打中，你损失不会很大，但如果打中了，那就是一种成功。</p><h4 id="长尾理论"><a href="#长尾理论" class="headerlink" title="长尾理论"></a>长尾理论</h4><p>话是这么说，不过，打中的可能性到底有多大了呢？如果黑暗森林里面完全没有猎物，你再努力打也是白费，子弹再便宜也要钱啊。失败成本再低，如果老是失败也是一笔不小的损失啊。<strong>我们要在有鱼的池塘里面钓鱼。</strong></p><p>克里斯·安德森提出来一个长尾理论。大概说的是，在以前，商品销量都符合长尾的分布，即百分之二十的商品占据百分之八十的销量，剩下百分之八十的商品只占百分之二十的销量。最典型的例子就是畅销书，畅销的音乐唱片，还有电影。最红的那几个作家、歌手、演员的作品包揽了大部分的市场分额，剩下的人只占一小部分分额。造成这种分布的原因是，商家只能服务附近的用户，在地理位置上是受限制的；而且每一件商品都是有存储、运输、分发成本的，如果销量太小就会亏本，所以他们会忽略小众用户的需求，尽量只卖受大众欢迎的商品。最后结果就是，「主流」的商品占据大部分的销量，而小众商品几乎不会被看见。</p><p>但克里斯·安德森认为这种分布会慢慢消失。因为随着互联网技术的发展，商家服务的用户已经没有地域的限制，小众用户可以在网上找到自己的社区，小众商品也能找到自己的受众。在一个平台上，所有小众商品的销量的总和可能是不亚于最畅销的那些商品的。所以，平台也会用推荐算法等各种手段，去帮助用户发现这些小众商品。</p><p>而且每一个人都会有一些爱好是偏离大众的，所以这将是一个选择极为丰富的时代。如果互联网是一个大商场，那不管你开的店在多么偏僻的角落，很有可能会相应的用户，他们就是喜欢待在这个角落。他们就是你的目标用户，会使用你的产品和服务。所以只要你做出来的产品确实是满足了某一些人的需求，而不是你自己幻想出来的，那么大概率它还是可以被发现、并提供价值的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;你可以想像一下，如果整个互联网都能通过搜索擎搜索得到，那么整个互联网就像是一个大商场，搜索的流量流经这个商场里面的每一家店。当一家店有人经过，并且它为这些人提供他们需要的产品和服务的时候，它就有可能把游客变成用户，并从中获得收益。&lt;/p&gt;
&lt;h4 id=&quot;拥有属于你的产品&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我们都应该尝试一下独立开发</title>
    <link href="http://blog.bluepill.life/2021/04/10/indie-dev/"/>
    <id>http://blog.bluepill.life/2021/04/10/indie-dev/</id>
    <published>2021-04-10T04:45:54.000Z</published>
    <updated>2021-04-15T01:25:44.741Z</updated>
    
    <content type="html"><![CDATA[<p>我们说的自由职业者，通常指的是一个人不依赖某一个机构、组织，通过自己的劳动、作品来赚钱谋生的状态，侧重于讲一个人的职业状态以及工作方式。</p><p>而我定义的独立开发者，是指一个人可以从 0 到 1 把一个产品做出来。这个从 0 到 1 的过程，包括产品构思、产品视觉设计、开发实现、市场推广等整一个流程。侧重于一个人的技能，以及他创造的作品。</p><h4 id="1000-粉丝理论与自由职业"><a href="#1000-粉丝理论与自由职业" class="headerlink" title="1000 粉丝理论与自由职业"></a>1000 粉丝理论与自由职业</h4><p>十几年多前凯文凯利提出一个 1000 死忠粉丝理论。这个理论大概说的是，互联网的出现，提供了一种全新的谋介，使得创作者可以直接跟他的用户联系，不用再像以前那样，需要通过中间平台才能跟用户接触。通过直接跟用户发生联系，创作者就不需要跟中间平台分成，所以他就可以获得绝大部分的作品收益。这样的话，一个创作者可能只需要找到 1000 粉丝去买他生产的作品，就可以得到足够支持他过体面生活的收入。</p><p>这个理论刚出现的时候，似乎是对自由职业的职业状态的一种支持——一个独立音乐人，可以在做充满个性独立的音乐、充分表达自己，同时还能赚到钱。但人们很快就发现，其实大多数人是很难单纯通过创作作品，赚到足够维持体面生活的收入的。</p><p>主要的一个问题在于 1000 死忠粉丝没有想像的那么容易找。凯文凯利对死忠粉丝的定义是，愿意购买创作者生产的任何作品的人。但现实是，在互联网上，一项服务或产品所有用户中，通常只有大概 1% 的用户愿意付费。所以，要找到 1000 位愿意付费的用户，就意味着你可能需要找到十万这个量级的粉丝。</p><p>而且好的作品不一定赚钱，例如，写严肃文学的作家赚的钱就不一定比写网络小说的作家多。因为作品赚不赚钱，本质上是由这个作品是不是提供了别人需要的价值、服务来决定的。所以，只有在大多数人们需要的是好东西的时候，好的作品才能赚钱。当然了，也有可能大多数人反过来重新定义什么是好作品，但这样就是另一个故事了。总而言之，要想同时满足自我表达的欲望，还能受欢迎并且轻易地赚到钱，这可能是一个过于浪漫的想法。</p><h4 id="独立开发作为一种自我表达工具"><a href="#独立开发作为一种自我表达工具" class="headerlink" title="独立开发作为一种自我表达工具"></a>独立开发作为一种自我表达工具</h4><p>你可以听说过一个词叫「人的异化」，大概意思是说一个人的劳动脱离了最终的产品，他看不到自己的劳动跟最终的产品有什么关系。所以他就没有办法从劳动中找到价值感，他会觉得自己就像大机器中的一个镙丝钉，感觉不到做的事情是有意义的。</p><p>在互联网行业的开发者，大概就处在这样一个异化的状态。在一个互联网公司里面，做什么产品，解决什么问题，为那些人群提供服务，这些通通都不是开发者参与决策的。但是，怎么问答这些问题，其实就决定了最终做出来的产品形态。也就是说，开发者在这个过程中负责的只是解决问题，而这些问题<strong>给定的</strong>，不是由开发者来选择的。</p><p>所以一个开发者很可能不会觉得自己做的东西解决了别人的问题，或者创造了多少的价值。因为他从一开始就不知道，别人有什么问题、他自己正在创造什么样的价值。实际上，很多开发者也不会去想这个问题。他们的意义感来源于把给定的问题解决得非常好，能设计出来非常好的代码。他们的关注点往往是：这个项目是不是用了很炫的技术，或者，自己的技术是不是好的。他们的 ego 跟技术是绑定在一起的。</p><p>这就像是通过把自己世界变小，来让自己的世界更加舒服一样，是一种自欺欺人的态度。因为毕竟所有技术的最终表达就是产品，技术要通过产品才能创造价值、改变世界。如果你要说，技术单纯作为一种智力享受，当然也可以，但实际上，大多数开发者到后期其实是把技术作为一种逃避的工具的，他们其实没有从技术中得到享受，纯粹只是躲在技术这个舒适区里面。在这个舒适区里面所有的努力，最多也只是一种心理安慰式的努力，它没有明确导向一个终点。<strong>一切只是在一个怪圈内打转，始终不会向前一步。</strong></p><p>但其实我们是可以自己走出这个怪圈的。技术只是一个工具，在我们已经掌握了这个工具之后，我们只需要使用这个工具去创造一些产品，再把创造出来的产品放出去。这样我们就跟开始跟这个世界有了联系的渠道，而不再只局限在自己的小圈子内。这样我们就开始能看到一个更大的世界。</p><p>而且我们的每一个产品都是一种自我表达，表达了我们是怎么看这个世界的、什么问题是值得解决的。把一个产品从 0 到 1 做出来的过程，也是一种全新的经验。在做这件事情的过程中，我们肯定也能获得一些新的体验，可以更进一步了解自己。</p><p>所以独立开发这件事情，其实是一件不会输的事情，你去做它是不会有任何损失的。那些阻碍你去做它的事情，反而更值得你去关注。因为如果你找不到路的话，路障就标记了路在哪里。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们说的自由职业者，通常指的是一个人不依赖某一个机构、组织，通过自己的劳动、作品来赚钱谋生的状态，侧重于讲一个人的职业状态以及工作方式。&lt;/p&gt;
&lt;p&gt;而我定义的独立开发者，是指一个人可以从 0 到 1 把一个产品做出来。这个从 0 到 1 的过程，包括产品构思、产品视觉设</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>观点</title>
    <link href="http://blog.bluepill.life/2021/04/08/opener/"/>
    <id>http://blog.bluepill.life/2021/04/08/opener/</id>
    <published>2021-04-08T15:06:31.000Z</published>
    <updated>2021-04-08T15:15:33.075Z</updated>
    
    <content type="html"><![CDATA[<p>在现在互联网上，最不缺的就是观点。观点的输出是没有成本的，基本上每一个能打字的人，都能够在网络上面输出观点。但虽然同样是输出观点，不同的人输出的观点是有区别的。</p><p>有的人输出观点，做的只是观点的转述，他把从别的地方看到的观点转述出来。很可能他本人并不知道这些观点的真正意思。最典型的例子就是谚语。我们大家可能都有过这样的体验，就是到人生某一个瞬间突然发现，原来这就是某某谚语所说的意思。也就是说，虽然这个谚语已经被我们说烂了，但其实在这个瞬间之前，我们是不知道这个谚语到底是什么意思的。正如曾经在网上流行的一句话说的那样，「听了很多的道理，但依然过不好这一生」。其实原因很简单，你只是听了一个观点，并不代表你理解了这个观点在说些什么。仅仅听了一个观点，是不可能对你有任何改变的。</p><p>一个人说出来的观点，往往是他关于这个世界的看法、事情运转规律的了解的一个概括。所以，每一个观点都有他相对应的背景。当你听到一个观点，想要真正理解它、并内化它，你需要了解它的背景。其中一种方法是，你可以去了解持有这个观点的人为什么会总结出来这个观点，他是经历了什么事情，是在什么情境下想出来的这个观点。另一种方法是，你把这个观点放到你自己的经历当中去，看看这个观点能不能符合你过去的生活经验；或者，你直接按照这个观点去生活一段时间，像做实验一样，在现实生活中检验这个观点是不是真的。</p><p>要真正得到一个观点，不是一件轻易的事情。所以，仅仅听了很多的道理，依然过不好这一生，其实是非常合理的。</p><p>在这个博客，我想做的不是输出观点，然后用例子来论证我的这些观点，希望说服你来相信我（实际上我完全没有理由去做这件事情）。我要做的，只是把改变过我的观点写出来。因为我相信虽然在生物层面上每一个人都是独一无二的，但在文化层面上，我们某些面向上是相同的，我们很可能会面对相同的问题。所以能改变我的观点、观念，大概率也会对你有帮助。我要做的，只是把这些观点、观念从我的知识网络里面，尽量清晰地转化成线性的文字。</p><h5 id="独立开发者"><a href="#独立开发者" class="headerlink" title="独立开发者"></a>独立开发者</h5><p>我是一个独立开发者。我所定义的独立开发，是指我可以从 0 到 1 把一个产品做出来。这个从 0 到 1 的过程，包括产品构思、产品视觉设计、开发实现、市场推广等整一个流程。</p><p>可能跟大多数人想像的「独立开发」有较大的区别。这个过程并不完全是跟软件开发相关的，实际上超过百分之五十的事情是跟软件开发无关的。但无论结果如何，你做出来产品有多少人用、带来多大的价值，这个旅程本身是都是非常有价值、非常值得分享的。</p><p>另外，在很多人的观念里面，独立开发者跟自由职业者是一个近义词，但在我的定义里面「独立开发者」跟「自由职业者」是有较大的区别的，这个具体会在以后说到。</p><p>总而言之，这个博客会涉及：</p><p>1）上面说到的我作为一个独立开发者从 0 到 1 做一个产品的过程中所有的知识、技术分享；</p><p>2）其实在这个世界上，做任何事情都可以看作是一种了解自己的渠道，在做产品的时候也一样。这个博客也会涉及，我在这个过程中，获得的很多看事情、看自己的视角。换一个流行一点儿的词就是，我的自我认知。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在现在互联网上，最不缺的就是观点。观点的输出是没有成本的，基本上每一个能打字的人，都能够在网络上面输出观点。但虽然同样是输出观点，不同的人输出的观点是有区别的。&lt;/p&gt;
&lt;p&gt;有的人输出观点，做的只是观点的转述，他把从别的地方看到的观点转述出来。很可能他本人并不知道这些观点</summary>
      
    
    
    
    
  </entry>
  
</feed>
